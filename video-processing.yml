Outputs:
  VideoInputBucket:
    Value: !Ref VideoInputBucket
  VideoOutputBucket:
    Value: !Ref VideoOutputBucket

Parameters:
  VideoToFrameContainer:
    Type: String
    Description: The Uri of the video-to-frame container
  VideoInferenceContainer:
    Type: String
    Description: The Uri of the video-inference container

Resources:
  VideoTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
              - states.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -MediaConvertConsolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "mediaconvert:*"
            Resource: 'arn:aws:mediaconvert:*:*:*'
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -MediaConvertIAMPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "iam:PassRole"
              - "iam:ListRoles"
            Resource: 'arn:aws:iam::*:role/*'
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -MediaConvertS3Policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:ListAllMyBuckets"
            Resource: 'arn:aws:s3:::*'
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -SageMakerExecutionPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "sagemaker:DescribeTransformJob"
              - "sagemaker:CreateTransformJob"
            Resource: '*'
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -S3AccessPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !ImportValue video-sharedinf-inputbucket
                  - '/*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !ImportValue video-sharedinf-outputbucket
                  - '/*'
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -SNSPublishPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
            Resource:
              - !ImportValue video-sharedinf-snstopic-arn
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -EventsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "events:PutTargets"
              - "events:PutRule"
              - "events:DescribeRule"
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -RunTask
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "ecs:RunTask"
            Resource: "*"
  Video2FrameLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/ecs/video-to-frame"
  VideoInferenceLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/ecs/video-inference"

  VideoCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
  VideoToFrameTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: 2048
      Memory: 16384
      ContainerDefinitions:
        -
          Name: 'video-to-frame'
          Image: !Ref VideoToFrameContainer
          Essential: true
          PortMappings:
            -
              ContainerPort: 5000
              Protocol: tcp
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
               "awslogs-group": "/ecs/video-to-frame"
               "awslogs-region": !Sub "${AWS::Region}"
               "awslogs-stream-prefix": "ecs"
      Family: "video-to-frame"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt VideoTaskRole.Arn
      TaskRoleArn: !GetAtt VideoTaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
  VideoInferenceTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: 2048
      Memory: 16384
      ContainerDefinitions:
        -
          Name: 'video-inference'
          Image: !Ref VideoInferenceContainer
          Essential: true
          PortMappings:
            -
              ContainerPort: 5000
              Protocol: tcp
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
               "awslogs-group": "/ecs/video-inference"
               "awslogs-region": !Sub "${AWS::Region}"
               "awslogs-stream-prefix": "ecs"
      Family: "video-inference"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt VideoTaskRole.Arn
      TaskRoleArn: !GetAtt VideoTaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
  VideoStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A video processing pipeline for bike safety",
              "StartAt": "video-to-frame",
              "States": {
                "video-to-frame": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::ecs:runTask.sync",
                  "Parameters": {
                    "LaunchType": "FARGATE",
                      "Cluster": "${VideoCluster.Arn}",
                      "TaskDefinition": "${VideoToFrameTask}",
                      "NetworkConfiguration": {
                        "AwsvpcConfiguration": {
                          "Subnets": ["${Subnet1}","${Subnet2}"],
                          "SecurityGroups":["${SecurityGroup}"],
                          "AssignPublicIp":"ENABLED"
                        }
                      },
                    "Overrides": {
                      "ContainerOverrides": [
                        {
                          "Name": "video-to-frame",
                          "Environment": [
                            {
                              "Name": "s3",
                              "Value.$": "$.s3_input"
                            },
                            {
                              "Name":"key",
                              "Value.$": "$.s3_input_file"
                            },
                            {
                              "Name":"output",
                              "Value.$": "$.s3_output"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "ResultPath": null,
                  "Next": "video-inference"
                },
                "video-inference": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::ecs:runTask.sync",
                  "Parameters": {
                    "LaunchType": "FARGATE",
                      "Cluster": "${VideoCluster.Arn}",
                      "TaskDefinition": "${VideoInferenceTask}",
                      "NetworkConfiguration": {
                        "AwsvpcConfiguration": {
                          "Subnets": ["${Subnet1}","${Subnet2}"],
                          "SecurityGroups":["${SecurityGroup}"],
                          "AssignPublicIp":"ENABLED"
                        }
                     },
                     "Overrides": {
                      "ContainerOverrides": [
                        {
                          "Name": "video-inference",
                          "Environment": [
                            {
                              "Name": "origin_bucket",
                              "Value.$": "$.s3_input"
                            },
                            {
                               "Name": "input_bucket_prefix",
                                "Value.$": "$.input_bucket_prefix"
                            },
                            {
                              "Name":"output_bucket",
                              "Value.$": "$.s3_output"
                            },
                            {
                              "Name": "output_bucket_prefix",
                              "Value.$": "$.output_bucket_prefix"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "End": true
                }
              }
            }
          - {
              Subnet1: !ImportValue video-sharedinf-subnet1,
              Subnet2: !ImportValue video-sharedinf-subnet2,
              SecurityGroup: !ImportValue video-sharedinf-publicsecuritygroup
            }
      RoleArn: !GetAtt VideoTaskRole.Arn
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaListener.Arn
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -lambda-logging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName:
          !Join
            - ''
            - - !Ref AWS::StackName
              - -statefunction-execution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
            - !Ref VideoStepFunction

  LambdaListener:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub |
            import json
            import urllib.parse
            import boto3

            print('Loading function')

            def lambda_handler(event, context):
                # Get the object from the event and show its content type
                bucket = event['Records'][0]['s3']['bucket']['name']
                key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
                try:

                  client = boto3.client('stepfunctions')
                  key_parts = key.split(".")
                  step_json = "{{ \"s3_input\" : \"{0}\", \"s3_input_file\" : \"{1}\", \"s3_output\" : \"${VideoOutputBucket}\", \"input_bucket_prefix\" : \"bike/{2}/\", \"output_bucket_prefix\": \"batch-inference/\"}}".format(bucket, key, key_parts[0])

                  response = client.start_execution(stateMachineArn="${VideoStepFunction.Arn}", input=step_json)

                except Exception as e:
                    print(e)
                    print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))
                    raise e

      Handler: "index.lambda_handler"
      Runtime: python3.7
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn

  VideoInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-input-bucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: MP4
            Function: !GetAtt LambdaListener.Arn
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
  VideoOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
